// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.subsystems;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.commands.JoystickDrive;
import org.usfirst.frc3824.Competition2018.RobotMap;
import org.usfirst.frc3824.Competition2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends Subsystem
{

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.chassisGyro;
    private final Encoder leftDriveEncoder = RobotMap.chassisLeftDriveEncoder;
    private final Encoder rightDriveEncoder = RobotMap.chassisRightDriveEncoder;
    private final SpeedController driveR1 = RobotMap.chassisDriveR1;
    private final SpeedController driveR2 = RobotMap.chassisDriveR2;
    private final SpeedControllerGroup rightDrive = RobotMap.chassisRightDrive;
    private final SpeedController driveL1 = RobotMap.chassisDriveL1;
    private final SpeedController driveL2 = RobotMap.chassisDriveL2;
    private final SpeedControllerGroup leftDrive = RobotMap.chassisLeftDrive;
    private final DifferentialDrive driveTrain = RobotMap.chassisDriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private double						m_distanceTraveled;

	public void Chassis()
	{
		leftDriveEncoder.setDistancePerPulse(Constants.ChassisEncoderDistancePerPulse);
		rightDriveEncoder.setDistancePerPulse(Constants.ChassisEncoderDistancePerPulse);
	}

	@Override
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	@Override
	public void periodic()
	{
		// Put code here to be run every loop

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	/**
	 * Method to control the drive through the specified joystick
	 */
	public void driveWithJoystick(Joystick stick)
	{
		// Square twist to decrease sensitivity
		double twist = stick.getTwist() * 0.75;

		// Determine if the twist is negative to allow restoring the sign
		if (twist < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			twist = -1.0 * (twist * twist);
		} else
		{
			twist = twist * twist;
		}

		// Square forward/backward to decrease sensitivity
		double moveValue = stick.getY();
		if (moveValue < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			moveValue = -1.0 * (moveValue * moveValue);
		} else
		{
			moveValue = moveValue * moveValue;
		}

		// Drive with arcade control
		driveTrain.arcadeDrive(moveValue, twist);
	}

	/**
	 * getDistanceTraveled - return the distance since the last position reset
	 * 
	 * @return (double) distance traveled in feet
	 */
	public double getDistanceTraveled()
	{
		return ((rightDriveEncoder.getDistance() + leftDriveEncoder.getDistance()) / 2.0);
	}

	/**
	 * reset the distance traveled to 0.0. getDistanceTraveled is based on the
	 * last reset
	 */
	public void resetDistanceTraveled()
	{
		rightDriveEncoder.reset();
		leftDriveEncoder.reset();
	}

	/**
	 * drive the robot "straight". This function does not currently include a
	 * gyro based PID to actually keep it driving straight.
	 * 
	 * @param power
	 *            - range [-1.0]... [1.0]
	 */
	public void driveStraight(double power)
	{
		driveTrain.arcadeDrive(power, 0.0);
	}

	public void stop()
	{
		driveTrain.stopMotor();
	}
}
