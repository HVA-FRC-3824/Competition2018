// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.subsystems;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.commands.JoystickDrive;
import org.usfirst.frc3824.Competition2018.RobotMap;
import org.usfirst.frc3824.Competition2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends Subsystem
{

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro gyro = RobotMap.chassisGyro;
    private final Encoder leftDriveEncoder = RobotMap.chassisLeftDriveEncoder;
    private final Encoder rightDriveEncoder = RobotMap.chassisRightDriveEncoder;
    private final SpeedController driveR1 = RobotMap.chassisDriveR1;
    private final SpeedController driveR2 = RobotMap.chassisDriveR2;
    private final SpeedControllerGroup rightDrive = RobotMap.chassisRightDrive;
    private final SpeedController driveL1 = RobotMap.chassisDriveL1;
    private final SpeedController driveL2 = RobotMap.chassisDriveL2;
    private final SpeedControllerGroup leftDrive = RobotMap.chassisLeftDrive;
    private final DifferentialDrive driveTrain = RobotMap.chassisDriveTrain;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private double						m_distanceTraveled;

	// Parameter used for drive while running under PID Control. The values
	// not set by the controller constructor can be set by a command directly
	private double						m_magnitude;

	// PID controller for driving based on Gyro
	private PIDController				angleGyroPID		= new PIDController(Constants.DrivetrainDriveStraight_P,
			Constants.DrivetrainDriveStraight_I, Constants.DrivetrainDriveStraight_D, gyro, new AnglePIDOutput());

	public void Chassis()
	{
		leftDriveEncoder.setDistancePerPulse(Constants.ChassisEncoderDistancePerPulse);
		rightDriveEncoder.setDistancePerPulse(Constants.ChassisEncoderDistancePerPulse);
	}

	@Override
	public void initDefaultCommand()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	@Override
	public void periodic()
	{
		// Put code here to be run every loop

	}

	// ************************************
	// Methods to call from commands
	// ************************************

	/*
	 * Method to stop the chassis drive motors and disable/reset pids
	 */
	public void resetChassisPIDcontrollersAndEncoders()
	{
		// Initialize the gyro PID controller
		angleGyroPID.disable();
		angleGyroPID.reset();

		// Reset the gyro angle
		gyro.reset();

		// Clear the drive magnitude
		// Note: The calling routine must reset the magnitude to the desired
		// value
		m_magnitude = 0;

		// Reset the drive encoders
		leftDriveEncoder.reset();
		rightDriveEncoder.reset();

		// Ensure the robot is stopped
		driveTrain.arcadeDrive(0, 0);
	}

	/**
	 * Method to control the drive through the specified joystick
	 */
	public void driveWithJoystick(Joystick stick)
	{
		// Square twist to decrease sensitivity
		double twist = stick.getTwist() * 0.75;

		// Determine if the twist is negative to allow restoring the sign
		if (twist < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			twist = -1.0 * (twist * twist);
		} else
		{
			twist = twist * twist;
		}

		// Square forward/backward to decrease sensitivity
		double moveValue = stick.getY();
		if (moveValue < 0)
		{
			// Remember to preserve direction, it is lost when squaring
			moveValue = -1.0 * (moveValue * moveValue);
		} else
		{
			moveValue = moveValue * moveValue;
		}

		// Drive with arcade control
		driveTrain.arcadeDrive(moveValue, twist);
	}

	/**
	 * Method to configure the gyro based turn/drive straight PID controller
	 */
	public void turnAnglePID(double desiredHeading, double power)
	{
		// Turn to the desired heading current heading
		startGyroPID(Constants.TurnAngle_P, Constants.TurnAngle_I, Constants.TurnAngle_D,
				Constants.TurnAngle_MinimumOutput, Constants.TurnAngle_MaximumOutput, desiredHeading);

		// Update the drive power
		m_magnitude = power;
	}

	/**
	 * getDistanceTraveled - return the distance since the last position reset
	 * 
	 * @return (double) distance traveled in feet
	 */
	public double getDistanceTraveled()
	{
		return ((rightDriveEncoder.getDistance() + leftDriveEncoder.getDistance()) / 2.0);
	}

	/**
	 * reset the distance traveled to 0.0. getDistanceTraveled is based on the
	 * last reset
	 */
	public void resetDistanceTraveled()
	{
		rightDriveEncoder.reset();
		leftDriveEncoder.reset();
	}

	/**
	 * drive the robot "straight". This function does not currently include a
	 * gyro based PID to actually keep it driving straight.
	 * 
	 * @param power
	 *            - range [-1.0]... [1.0]
	 */
	public void driveStraight(double power)
	{
		driveTrain.arcadeDrive(power, 0.0);
	}

	/**
	 * Stop the robot
	 */
	public void stop()
	{
		driveTrain.stopMotor();
	}

	/**
	 * Class declaration for the PIDOutput - When a PID is provided this class,
	 * the pidWrite of this call will get called on each iteration - This class
	 * is used to turn the robot under PID control
	 */
	private class AnglePIDOutput implements PIDOutput
	{
		/**
		 * Virtual function to receive the PID output and set the drive
		 * direction
		 */
		public void pidWrite(double PIDoutput)
		{
			// Drive the robot given the speed and direction
			// Note: The Arcade drive expects a joystick which is negative
			// forward
			driveTrain.arcadeDrive(-m_magnitude, PIDoutput, false);
		}
	}

	/**
	 * Class declaration for the PIDOutput - When a PID is provided this class,
	 * the pidWrite of this call will get called on each iteration - This class
	 * is used to set the speed of the right drive while under PID control
	 */
	public class EncoderPIDOutputRight implements PIDOutput
	{
		/**
		 * Virtual function to receive the PID output and set the drive
		 * direction
		 */
		public void pidWrite(double PIDoutput)
		{
			rightDrive.set(PIDoutput + m_magnitude);

			// SmartDashboard.putNumber("Right Output", PIDoutput);
		}
	}

	/**
	 * Class declaration for the PIDOutput - When a PID is provided this class,
	 * the pidWrite of this call will get called on each iteration - This class
	 * is used to set the speed of the left drive while under PID control
	 */
	public class EncoderPIDOutputLeft implements PIDOutput
	{
		/**
		 * Virtual function to receive the PID output and set the drive
		 * direction
		 */
		public void pidWrite(double PIDoutput)
		{
			leftDrive.set(-PIDoutput + m_magnitude);

			// SmartDashboard.putNumber("Left Output", -PIDoutput);
		}
	}

	// ************************************
	// Methods to get values from chassis sensors
	// ************************************
	/**
	 * Method to determine if the gyro angle is within the specified range
	 */
	public boolean gyroWithin(double threshold)
	{
		// SmartDashboard.putNumber("Error", angleGyroPID.getError());

		// Return if the gyro is within the specified range
		return Math.abs(angleGyroPID.getError()) < threshold;
	}

	// ************************************
	// Private helpers
	// ************************************

	/**
	 * set chassis to be under PID control
	 * 
	 * @param P
	 * @param I
	 * @param D
	 * @param minimumOutput
	 * @param maximumOutput
	 * @param tolerance
	 * @param desiredHeading
	 *            (relative to current heading, 0 is keep current heading)
	 */
	private void startGyroPID(double P, double I, double D, double minimumOutput, double maximumOutput,
			double desiredHeading)
	{
		// reset other PIDS
		resetChassisPIDcontrollersAndEncoders();

		// Initialize the Gryo angle PID parameters
		angleGyroPID.setPID(P, I, D);

		// Set the desired chassis heading
		angleGyroPID.setSetpoint(desiredHeading);

		// Limit the output power when turning
		angleGyroPID.setOutputRange(minimumOutput, maximumOutput);

		// Enable the Gyro PID
		angleGyroPID.enable();
	}

}
