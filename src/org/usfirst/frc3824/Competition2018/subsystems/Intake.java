// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.subsystems;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.Robot;
import org.usfirst.frc3824.Competition2018.RobotMap;
import org.usfirst.frc3824.Competition2018.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/*********************************************************************
 *
 *********************************************************************/
public class Intake extends Subsystem
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX right = RobotMap.intakeRight;
    private final WPI_TalonSRX left = RobotMap.intakeLeft;
    private final WPI_TalonSRX angle = RobotMap.intakeAngle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /*********************************************************************
     *
     *********************************************************************/
    public void Intake()
    {
        /**********************************************************************************/
        left.set(ControlMode.Velocity, 0);
        left.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, Constants.TalonInitialCommunicationTimeout);
        left.setSensorPhase(false);

        left.configClosedloopRamp(0, Constants.TalonInitialCommunicationTimeout);

        left.configNominalOutputForward(0, Constants.TalonInitialCommunicationTimeout);
        left.configNominalOutputReverse(0, Constants.TalonInitialCommunicationTimeout);
        left.configPeakOutputForward(Constants.IntakeWheelPIDMaximum, Constants.TalonInitialCommunicationTimeout);
        left.configPeakOutputReverse(Constants.IntakeAnglePIDMinimum, Constants.TalonInitialCommunicationTimeout);

        left.config_kF(0, Constants.IntakeWheelPIDParamF, Constants.TalonInitialCommunicationTimeout);
        left.config_kP(0, Constants.IntakeWheelPIDParamP, Constants.TalonInitialCommunicationTimeout);
        left.config_kI(0, Constants.IntakeWheelPIDParamI, Constants.TalonInitialCommunicationTimeout);
        left.config_kD(0, Constants.IntakeWheelPIDParamD, Constants.TalonInitialCommunicationTimeout);

        resetLeftWheelPosition();

        /**********************************************************************************/
        right.set(ControlMode.Velocity, 0);
        right.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, Constants.TalonInitialCommunicationTimeout);
        right.setInverted(true);

        right.configClosedloopRamp(0, Constants.TalonInitialCommunicationTimeout);

        right.configNominalOutputForward(0, Constants.TalonInitialCommunicationTimeout);
        right.configNominalOutputReverse(0, Constants.TalonInitialCommunicationTimeout);
        right.configPeakOutputForward(Constants.IntakeWheelPIDMaximum, Constants.TalonInitialCommunicationTimeout);
        right.configPeakOutputReverse(Constants.IntakeAnglePIDMinimum, Constants.TalonInitialCommunicationTimeout);

        right.config_kF(0, Constants.IntakeWheelPIDParamF, Constants.TalonInitialCommunicationTimeout);
        right.config_kP(0, Constants.IntakeWheelPIDParamP, Constants.TalonInitialCommunicationTimeout);
        right.config_kI(0, Constants.IntakeWheelPIDParamI, Constants.TalonInitialCommunicationTimeout);
        right.config_kD(0, Constants.IntakeWheelPIDParamD, Constants.TalonInitialCommunicationTimeout);

        resetRightWheelPosition();

        /**********************************************************************************/
        angle.set(ControlMode.Position, 0);
        angle.configSelectedFeedbackSensor(FeedbackDevice.Analog, 0, Constants.TalonInitialCommunicationTimeout);
        angle.setSensorPhase(false);
        angle.configSetParameter(ParamEnum.eFeedbackNotContinuous, 1, 0x00, 0x00, 0x00);

        angle.configClosedloopRamp(0, Constants.TalonInitialCommunicationTimeout);
        
        angle.configNominalOutputForward(0, Constants.TalonInitialCommunicationTimeout);
        angle.configNominalOutputReverse(0, Constants.TalonInitialCommunicationTimeout);
        angle.configPeakOutputForward(Constants.IntakeAnglePIDMaximum, Constants.TalonInitialCommunicationTimeout);
        angle.configPeakOutputReverse(Constants.IntakeAnglePIDMinimum, Constants.TalonInitialCommunicationTimeout);

        angle.config_kF(0, Constants.IntakeAnglePIDParamF, Constants.TalonInitialCommunicationTimeout);
        angle.config_kP(0, Constants.IntakeAnglePIDParamP, Constants.TalonInitialCommunicationTimeout);
        angle.config_kI(0, Constants.IntakeAnglePIDParamI, Constants.TalonInitialCommunicationTimeout);
        angle.config_kD(0, Constants.IntakeAnglePIDParamD, Constants.TalonInitialCommunicationTimeout);
        
        resetAnglePosition();  // Not really need for Analog feedback
    }

    /**********************************************************************************/
    /* Right intake wheel */
    /**********************************************************************************/

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_ErrorRight()
    {
        return right.getClosedLoopError(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorVoltageRight()
    {
        return right.getMotorOutputVoltage();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorPercentRight()
    {
        return right.getMotorOutputPercent();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public ControlMode getMotorControlModeRight()
    {
        return right.getControlMode();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_SetpointRight()
    {
        return right.getClosedLoopTarget(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getVelocityRight()
    {
        return right.getSelectedSensorVelocity(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPositionRight()
    {
        return right.getSelectedSensorPosition(0);
    }

    /*********************************************************************
    *
    *********************************************************************/
    public void resetRightWheelPosition()
    {
        right.setSelectedSensorPosition(0, 0, Constants.TalonInitialCommunicationTimeout);
    }

    /**********************************************************************************/
    /* Left intake wheel */
    /**********************************************************************************/

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_ErrorLeft()
    {
        return left.getClosedLoopError(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorVoltageLeft()
    {
        return left.getMotorOutputVoltage();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorPercentLeft()
    {
        return left.getMotorOutputPercent();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public ControlMode getMotorControlModeLeft()
    {
        return left.getControlMode();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_SetpointLeft()
    {
        return left.getClosedLoopTarget(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getVelocityLeft()
    {
        return left.getSelectedSensorVelocity(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPositionLeft()
    {
        return left.getSelectedSensorPosition(0);
    }

    /*********************************************************************
    *
    *********************************************************************/
    public void resetLeftWheelPosition()
    {
        left.setSelectedSensorPosition(0, 0, Constants.TalonInitialCommunicationTimeout);
    }

    /**********************************************************************************/
    /* Intake angle */
    /**********************************************************************************/

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_ErrorAngle()
    {
        return angle.getClosedLoopError(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorVoltageAngle()
    {
        return angle.getMotorOutputVoltage();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getMotorPercentAngle()
    {
        return angle.getMotorOutputPercent();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public ControlMode getMotorControlModeAngle()
    {
        return angle.getControlMode();
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPID_SetpointAngle()
    {
        return angle.getClosedLoopTarget(0);
    }

    /*********************************************************************
     * 
     *********************************************************************/
    public double getPositionAngle()
    {
        return angle.getSensorCollection().getAnalogIn();
    }

    /*********************************************************************
    *
    *********************************************************************/
    public void resetAnglePosition()
    {
        angle.setSelectedSensorPosition(0, 0, Constants.TalonInitialCommunicationTimeout);
    }
    
    /*********************************************************************
     *  
     *********************************************************************/
    @Override
    public void initDefaultCommand()
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.1
        // setDefaultCommand(new MySpecialCommand());
    }

    /*********************************************************************
     *
     *********************************************************************/
    @Override
    public void periodic()
    {
        double joy = Robot.oi.driveJoystick.getThrottle();
        
        setAngle(90 * joy);
        
        SmartDashboard.putNumber("Angle Value", (90 * joy));
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    /*********************************************************************
     *
     *********************************************************************/
    public void setIntakeIn()
    {
        // speed we want intake to occur
        setSpeed(true, 0);
    }

    /*********************************************************************
     *
     *********************************************************************/
    public void setIntakeOut()
    {
        // speed for spitting out cube
        setSpeed(false, 0);
    }

    /*********************************************************************
     *
     *********************************************************************/
    public boolean shouldStop()
    {
        // TODO: add code to turn off wheels when cube is fully inside
        return false;
    }

    /*********************************************************************
     *
     *********************************************************************/
    public void setSpeed(boolean direction, double speed)
    {
        /* Speed mode */
        /*
         * 4096 Units/Rev * 500 RPM / 600 100ms/min in either direction:
         * velocity setpoint is in units/100ms 500 RPM is maximum wheel speed
         */
        double targetVelocity_UnitsPer100ms = speed * 4096 / 600;

        if (direction == false)
            targetVelocity_UnitsPer100ms = -targetVelocity_UnitsPer100ms;

        /* 1500 RPM in either direction */
        left.set(ControlMode.Velocity, targetVelocity_UnitsPer100ms);
        right.set(ControlMode.Velocity, targetVelocity_UnitsPer100ms);
    }

    /*********************************************************************
    *
    *********************************************************************/
    public void setAngle(double positionAngle)
    {
        double slope = (Constants.EncoderPlusDegrees - Constants.EncoderMinusDegrees) / 180;
        double Yint = Constants.EncoderMinusDegrees + (slope * 90);

        double calculatedAngle = (positionAngle * slope) + Yint;
        angle.set(ControlMode.Position, calculatedAngle);

        // angle.setSelectedSensorPosition((int) calculatedAngle, 0, 0);
        SmartDashboard.putNumber("Calculated Angle", calculatedAngle);
    }
}
