// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.Robot;
import org.usfirst.frc3824.Competition2018.subsystems.*;

/**
 *
 */
public class AutonomousPlaceSwitchCenter extends CommandGroup
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousPlaceSwitchCenter() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        // addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        // addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        double distance = 0.0;
        double angle = 45.0;

        String gameData = DriverStation.getInstance().getGameSpecificMessage();

        if (gameData.length() > 0)
        {
            // Set intake to horizontal position
            addParallel(new IntakeRotate(0.0));

            // Raise elevator to switch height
            addParallel(new ElevatorUpDownPosition(Constants.ElevatorSwitchPosition));

            addParallel(new IntakeInOutVoltage(true, Constants.IntakeWheelHoldVoltage));

            // Drive forward to switch
            distance += Constants.AutoCenterSwitchFromWall;
            addSequential(new ChassisDriveDistance(distance, 0.4, 0.0));

            // Determine which switch is active
            if (gameData.charAt(0) == 'L')
            {
                angle = -45.0;
                distance += 3;
            }

            addSequential(new ChassisTurnAngle(angle, 0.0), 1.0);

            distance += Constants.AutoCenterSwitchDiagonal;
            addSequential(new ChassisDriveDistance(distance, 0.6, angle));

            addSequential(new ChassisTurnAngle(0.0, 0.0), 1.0);

            distance += Constants.AutoCenterSwitchToSwitch;
            addSequential(new ChassisDriveRange(10, 0.4, 0.0));

            addSequential(new IntakeInOutTime(false, 2.0, Constants.IntakeMaximumRPM));

            // Set intake to home position
            addSequential(new IntakeRotate(Constants.IntakeAngleHomePosition));
            
            addSequential(new Delay(1));
//            distance += Constants.AutoCenterSwitchDiagonal;
//            addSequential(new ChassisDriveDistance(distance, -0.6, angle));
            
            
            // Set elevator to home position
            addSequential(new ElevatorUpDownPosition(Constants.ElevatorStartPosition));

            // Stop intake wheels
            addSequential(new IntakeInOut(true, 0));

            // Turn to face switch

            // Drive forward to switch

            // Place cube on switch

            // Back up away from switch

            // Drive forward past switch

            // Turn to face cubes

            // Turn on cube intake

            // Drive forward to grab cube
        }
    }
}
