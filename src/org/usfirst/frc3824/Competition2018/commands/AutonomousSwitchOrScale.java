// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.subsystems.*;

/*********************************************************************
 *
 *********************************************************************/
public class AutonomousSwitchOrScale extends CommandGroup
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousSwitchOrScale(String startingPosition) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // Get the switch and scale settings
        String gameData = DriverStation.getInstance().getGameSpecificMessage();

        // Ensure the gameData is available
        if (gameData.length() >= 2)
        {
            // If starting on the Right and the Right Switch is active, then place cube on Right Switch
            if (startingPosition.contains("Right") && gameData.charAt(0) == 'R')
            {
                // Need to turn left for the right side Switch
                placeSwitch(-90.0);
            }

            // If starting on the Left and the Left Switch is active, then place cube on Left Switch
            else if (startingPosition.contains("Left") && gameData.charAt(0) == 'L')
            {
                // Need to turn right for the left side Switch
                placeSwitch(90.0);
            }

            // If starting on the Right and the Right Scale is active, then place cube on Right Scale
            else if (startingPosition.equals("Right") && gameData.charAt(1) == 'R')
            {
                // Need to turn left for the left side Scale
                placeScale(-75.0);
            }

            // If starting on the Left and the Left Scale is active, then place cube on Left Scale
            else if (gameData.charAt(1) == 'L' && startingPosition.contains("Left"))
            {
                // Need to turn right for the right side Scale
                placeScale(75.0);
            }

            // If starting on the Right and the Left Scale is active, then place cube on Left Scale OR
            // If starting on the Left and the Right Scale is active, then place cube on Right Scale
            else
            {
                // Place the cube on the opposite starting side Scale
                placeOppositeScale(startingPosition);
            }

        }
        else // Not able to read Game data so just drive straight to cross the auto line
        {
            // Cross the auto line
            addSequential(new AutonomousCrossAutoLine());
        }
    }

    /*********************************************************************
     * Set the intake and the elevator to the home position
     *********************************************************************/
    public void initializseIntakeAndElevator(double intakeAngle, double elevatorHeight)
    {
        // Set intake to horizontal position
        addParallel(new IntakeRotate(intakeAngle));

        // Raise elevator to switch height
        addParallel(new ElevatorUpDownPosition(elevatorHeight));

        // Set intake wheel voltage to hold onto cube
        addParallel(new IntakeInOutVoltage(true, Constants.IntakeWheelHoldVoltage));
    }

    /*********************************************************************
     * Set the intake and the elevator to the home position
     *********************************************************************/
    public void homeIntakeAndElevator()
    {
        // Set intake to home position
        addSequential(new IntakeRotate(Constants.IntakeAngleHomePosition));

        // Set elevator to home position
        addSequential(new ElevatorUpDownPosition(Constants.ElevatorStartPosition));

        // Stop intake wheels
        addSequential(new IntakeInOut(true, 0));
    }

    /*********************************************************************
     * Place cube on Switch
     *********************************************************************/
    public void placeSwitch(double angle)
    {
        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializseIntakeAndElevator(Constants.IntakePlaceAngle, Constants.ElevatorSwitchPosition);

        // Drive forward to Switch
        addParallel(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveSwitchDistance, 
                                             Constants.AutoSwitchOrScaleDriveSwitchPower, 0.0));

        // Turn towards the Switch
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Drive up to the Switch
        addSequential(new ChassisDriveRange(Constants.AutoSwitchOrScaleToSwitchDistance, 
                                            Constants.AutoSwitchOrScaleToSwitchPower, 0.0));

        // Place the cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        // Back up from the Switch
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleBackUpDistance, 
                                               Constants.AutoSwitchOrScaleBackUpPower, angle));

        // Set the intake and elevator to the home position for teleoperated period
        homeIntakeAndElevator();
    }

    /*********************************************************************
     * Place cube on Scale
     *********************************************************************/
    public void placeScale(double angle)
    {
        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializseIntakeAndElevator(Constants.IntakeShootAngle, Constants.ElevatorSwitchPosition);

        // Drive forward to Scale
        addParallel(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveScaleDistance, 
                                             Constants.AutoSwitchOrScaleDriveScalePower, 0.0));

        // Raise the elevator to the Scale position
        addParallel(new ElevatorUpDownPosition(Constants.ElevatorScalePosition));

        // Turn towards the Scale
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Wait for turn to complete and scale to reach height
        // Note: MAY BE ABLE TO REMOVE
        addSequential(new Delay(2));

        // Release the Cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        // Set the intake and elevator to the home position for teleoperated period
        homeIntakeAndElevator();
    }

    /*********************************************************************
     * Place cube on opposite Scale
     *********************************************************************/
    public void placeOppositeScale(String startingSide)
    {
        double angleFirstTurn = -90.0;
        double angleTurnToShoot = 75.0;

        // Determine the starting side
        if (startingSide.contains("Left"))
        {
            // Turn right if starting on the Left side to drive to the opposite side
            angleFirstTurn = -angleFirstTurn;
            angleTurnToShoot = -angleTurnToShoot;
        }

        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializseIntakeAndElevator(Constants.IntakeShootAngle, Constants.ElevatorSwitchPosition);

        // Drive to between the Switch and Scale
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveOppositeScaleDistance, 
                                               Constants.AutoSwitchOrScaleDriveOppositeScalePower, 0.0));

        // Turn to drive to the opposite
        addSequential(new ChassisTurnAngle(angleFirstTurn, 0.0), Constants.ChassisTurnTimeOutTime);

        // Drive to the opposite side
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveAcrossFieldDistance, 
                                               Constants.AutoSwitchOrScaleDriveAcrossFieldPower, angleFirstTurn));

        // Turn to drive up the field
        addSequential(new ChassisTurnAngle(0.0, 0.0), Constants.ChassisTurnTimeOutTime);

        // Raise the elevator to the Scale position
        addParallel(new ElevatorUpDownPosition(Constants.ElevatorScalePosition));

        // Drive up the field to cross the "shoot" line
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveScaleShortDistance, 
                                               Constants.AutoSwitchOrScaleDriveScaleShortPower, 0.0));

        // Turn towards to the Scale
        addSequential(new ChassisTurnAngle(angleTurnToShoot, 0.0), Constants.ChassisTurnTimeOutTime);

        // Wait for turn to complete and the elevator to rise
        // Note: MAY BE ABLE TO REMOVE
        addSequential(new Delay(2));

        // Release the Cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        // Set the intake and elevator to the home position for teleoperated period
        homeIntakeAndElevator();
    }
}
