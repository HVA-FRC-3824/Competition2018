// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.subsystems.*;

/**
 *
 */
public class AutonomousSwitchOrScale extends CommandGroup
{

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousSwitchOrScale(String startingPosition)
    {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        // addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        // addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        double distance = 0.0;
        double angle = -90.0;
        double elevatorHeight = Constants.ElevatorSwitchPosition;

        SmartDashboard.putBoolean("Selection", false);

        String gameData = DriverStation.getInstance().getGameSpecificMessage();

        if (gameData.length() >= 2)
        {
            // Set intake to horizontal position
            addParallel(new IntakeRotate(Constants.IntakeShootAngle));

            // Raise elevator to switch height
            addParallel(new ElevatorUpDownPosition(elevatorHeight));

            // Set intake wheel voltage to hold onto cube
            addParallel(new IntakeInOutVoltage(true, Constants.IntakeWheelHoldVoltage));

            // Drive forward to switch or scale depending on start positions
            if (gameData.charAt(0) == 'L' && startingPosition.contains("Left"))
            {

                distance += Constants.AutoSwitchOrScaleDriveSwitch;
                angle = 90.0;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.8, 0.0));
            }
            else if (gameData.charAt(0) == 'R' && startingPosition.contains("Right"))
            {
                distance += Constants.AutoSwitchOrScaleDriveSwitch;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.8, 0.0));
            }
            else if (gameData.charAt(1) == 'L' && startingPosition.contains("Left"))
            {
                SmartDashboard.putBoolean("Selection", true);

                distance += Constants.AutoSwitchOrScaleDriveScale;
                elevatorHeight = Constants.ElevatorScalePosition;
                angle = 75.0;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.8, 0.0));
            }
            else if (gameData.charAt(1) == 'R' && startingPosition.equals("Right"))
            {
                distance += Constants.AutoSwitchOrScaleDriveScale;
                elevatorHeight = Constants.ElevatorScalePosition;
                angle = -75.0;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.8, 0.0));
            }
            else if (gameData.charAt(1) == 'L' && startingPosition.equals("Right"))
            {
                distance += Constants.AutoSwitchOrScaleDriveOppositeScale;
                addSequential(new ChassisDriveDistance(distance, 0.8, 0.0));
                addSequential(new ChassisTurnAngle(angle, 0.0));
                distance += Constants.AutoSwitchOrScaleDriveAcrossField;
                angle = 90.0;
                elevatorHeight = Constants.ElevatorScalePosition;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.8, 0.0));
            }
            else if (gameData.charAt(1) == 'R' && startingPosition.equals("Left"))
            {
                distance += Constants.AutoSwitchOrScaleDriveOppositeScale;         
                addSequential(new ChassisDriveDistance(distance, 0.8, 0.0));
                
                angle = 90.0;
                addSequential(new ChassisTurnAngle(angle, 0.0), 2.0);
                
                distance += Constants.AutoSwitchOrScaleDriveAcrossField;                
                addSequential(new ChassisDriveDistance(distance, 0.8, angle));
                
                elevatorHeight = Constants.ElevatorScalePosition;                
                addParallel(new ElevatorUpDownPosition(elevatorHeight));
                
                angle = 0.0;                
                addSequential(new ChassisTurnAngle(angle, 0.0), 2.0);
                
                distance += Constants.AutoSwitchOrScaleDriveScaleShort;
                
                SmartDashboard.putNumber("Auto Distance", distance);
                addParallel(new ChassisDriveDistance(distance, 0.4, 0.0));
                
                angle = -75.0;
            }

            addParallel(new ElevatorUpDownPosition(elevatorHeight));

            addSequential(new ChassisTurnAngle(angle, 0.0), 1.0);

            addSequential(new Delay(2));

            addSequential(new IntakeInOutTime(false, 2.0, Constants.IntakeMaximumRPM));

            // Set intake to home position
            addSequential(new IntakeRotate(Constants.IntakeAngleHomePosition));

            // Set elevator to home position
            addSequential(new ElevatorUpDownPosition(Constants.ElevatorStartPosition));

            // Stop intake wheels
            addSequential(new IntakeInOut(true, 0));
        }
    }
}
