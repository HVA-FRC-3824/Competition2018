// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.commands;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.subsystems.*;

/*********************************************************************
 *
 *********************************************************************/
public class AutonomousSwitchOrScale extends CommandGroup
{
    public enum SecondCubePos
    {
        switchPos, scalePos, none
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousSwitchOrScale(String startingPosition, String oneTwoCube)
    {
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

        // Get the switch and scale settings
        String gameData = DriverStation.getInstance().getGameSpecificMessage();

        // Determines whether we place the second cube and where
        SecondCubePos secondCube = setSecondCubePosition(oneTwoCube);

        // Ensure the gameData is available
        if (gameData.length() >= 2)
        {
            // If starting on the Right and the Right Switch is active, then
            // place cube on Right Switch
            if (startingPosition.contains("Right") && gameData.charAt(0) == 'R')
            {
                // Need to turn left for the right side Switch
                placeSwitch(startingPosition, secondCube);
            }

            // If starting on the Left and the Left Switch is active, then place
            // cube on Left Switch
            else if (startingPosition.contains("Left") && gameData.charAt(0) == 'L')
            {
                // Need to turn right for the left side Switch
                placeSwitch(startingPosition, secondCube);
            }

            // If starting on the Right and the Right Scale is active, then
            // place cube on Right Scale
            else if (startingPosition.equals("Right") && gameData.charAt(1) == 'R')
            {
                // Need to turn left for the left side Scale
                placeScale(-75.0);
            }

            // If starting on the Left and the Left Scale is active, then place
            // cube on Left Scale
            else if (gameData.charAt(1) == 'L' && startingPosition.contains("Left"))
            {
                // Need to turn right for the right side Scale
                placeScale(75.0);
            }

            // If starting on the Right and the Left Scale is active, then place
            // cube on Left Scale OR
            // If starting on the Left and the Right Scale is active, then place
            // cube on Right Scale
            else
            {
                // Place the cube on the opposite starting side Scale
                placeOppositeScale(startingPosition);
            }

        }
        else // Not able to read Game data so just drive straight to cross the
             // auto line
        {
            // Cross the auto line
            addSequential(new AutonomousCrossAutoLine());
        }
    }

    /*********************************************************************
     * Set the intake and the elevator to the home position
     *********************************************************************/
    public void initializeIntakeAndElevator(double intakeAngle, double elevatorHeight)
    {
        // Set intake to horizontal position
        addParallel(new IntakeRotate(intakeAngle));

        // Raise elevator to switch height
        addParallel(new ElevatorUpDownPosition(elevatorHeight));

        // Set intake wheel voltage to hold onto cube
        addParallel(new IntakeInOutVoltage(true, Constants.IntakeWheelHoldVoltage));
    }

    /*********************************************************************
     * Set the intake and the elevator to the home position
     *********************************************************************/
    public void homeIntakeAndElevator()
    {
        // Set intake to home position
        addSequential(new IntakeRotate(Constants.IntakeAngleHomePosition));

        // Adds delay which stops the intake from getting caught on elevator
        // lower
        addSequential(new Delay(1));

        // Set elevator to home position
        addSequential(new ElevatorUpDownPosition(Constants.ElevatorStartPosition));

        // Stop intake wheels
        addSequential(new IntakeInOut(true, 0));
    }

    /*********************************************************************
     * Place cube on Switch
     *********************************************************************/
    public void placeSwitch(String startingPosition, SecondCubePos secondCube)
    {
        boolean isRightStart = true;
        double angle = -90.0; // Assume starting on right side

        // Set angle based on starting position
        if (startingPosition.contains("Left"))
        {
            isRightStart = false;
            angle = -angle;
        }

        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializeIntakeAndElevator(Constants.IntakeShootAngle, Constants.ElevatorSwitchPosition);

        // Drive forward to Switch
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveSwitchDistance, Constants.AutoSwitchOrScaleDriveSwitchPower, 0.0));

        // Turn towards the Switch
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Drive up to the Switch
        addSequential(new ChassisDriveRange(Constants.AutoSwitchOrScaleToSwitchDistance, 
                                            Constants.AutoSwitchOrScaleToSwitchPower, angle), 2.0);

        // Place the cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeSwitchRPM));

        // Make sure we are doing a 2 cube autonomous
        if (secondCube.equals(SecondCubePos.switchPos) || secondCube.equals(SecondCubePos.scalePos))
        {
            // Robot receives cube at the corner after placing the first cube on the switch
            getCornerCubeSwitch(isRightStart);
        }
        else
        {
            // Back up from the Switch
            addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleBackUpDistance, Constants.AutoSwitchOrScaleBackUpPower, angle));
        }

        // TODO: Remove after complete
        addSequential(new Delay(5));

        // Set the intake and elevator to the home position for teleoperated
        // period
        homeIntakeAndElevator();
    }

    /*********************************************************************
     * Place cube on Scale
     *********************************************************************/
    public void placeScale(double angle)
    {
        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializeIntakeAndElevator(Constants.IntakeShootAngle, Constants.ElevatorSwitchPosition);

        // Drive forward to Scale
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveScaleDistance, Constants.AutoSwitchOrScaleDriveScalePower, 0.0));

        // Raise the elevator to the Scale position
        addParallel(new ElevatorUpDownPosition(Constants.ElevatorScalePosition));

        // Turn towards the Scale
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Wait for turn to complete and scale to reach height
        // Note: MAY BE ABLE TO REMOVE
        addSequential(new Delay(2.5));

        // Release the Cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        // Set the intake and elevator to the home position for teleoperated
        // period
        homeIntakeAndElevator();
    }

    /*********************************************************************
     * Place cube on opposite Scale
     *********************************************************************/
    public void placeOppositeScale(String startingSide)
    {
        double angleFirstTurn = -90.0;
        double angleTurnToShoot = 80.0;

        // Determine the starting side
        if (startingSide.contains("Left"))
        {
            // Turn right if starting on the Left side to drive to the opposite
            // side
            angleFirstTurn = -angleFirstTurn;
            angleTurnToShoot = -angleTurnToShoot;
        }

        // Drive to between the Switch and Scale
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveOppositeScaleDistance, Constants.AutoSwitchOrScaleDriveOppositeScalePower, 0.0));

        // Turn to drive to the opposite
        addSequential(new ChassisTurnAngle(angleFirstTurn, 0.0), Constants.ChassisTurnTimeOutTime);

        // Drive to the opposite side
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveAcrossFieldDistance, Constants.AutoSwitchOrScaleDriveAcrossFieldPower, angleFirstTurn));

        addSequential(new ChassisDriveRange(36.0, 0.4, angleFirstTurn));

        // Turn to drive up the field
        addSequential(new ChassisTurnAngle(0.0, 0.0), Constants.ChassisTurnTimeOutTime);

        // Set the elevator height, intake angle, and intake wheels to hold cube
        initializeIntakeAndElevator(Constants.IntakeShootAngle, Constants.ElevatorScalePosition);

        // Drive up the field to cross the "shoot" line
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleDriveScaleShortDistance, Constants.AutoSwitchOrScaleDriveScaleShortPower, 0.0));

        // Turn towards to the Scale
        addSequential(new ChassisTurnAngle(angleTurnToShoot, 0.0), Constants.ChassisTurnTimeOutTime);

        // Release the Cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        // Set the intake and elevator to the home position for teleoperated period
        homeIntakeAndElevator();
    }

    /*********************************************************************
     * Determines where to place second Power Cube
     *********************************************************************/
    public SecondCubePos setSecondCubePosition(String cubeSelection)
    {
        SecondCubePos secondCube = SecondCubePos.none;

        // Determines whether we place the second cube and where
        if (cubeSelection.contains("Scale"))
            secondCube = SecondCubePos.scalePos;
        else if (cubeSelection.contains("Switch"))
            secondCube = SecondCubePos.switchPos;

        return secondCube;
    }

    /*********************************************************************
     * Receive second cube for 2 cube autonomous after placing on switch
     *********************************************************************/
    public boolean getCornerCubeSwitch(boolean isRightStart)
    {
        double angle = -170;
        if (!isRightStart)
            angle = -angle;

        // Go back to initial orientation
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Set intake in position to receive new cube
        addParallel(new IntakeRotate(Constants.IntakePlaceAngle));

        // Set elevator in position to receive new cube
        addParallel(new ElevatorUpDownPosition(Constants.ElevatorBottomPosition));

        // Drive backwards to get ready to turn towards new cube
        addSequential(new ChassisDriveDistance(Constants.AutoSwitchOrScaleToNextCube1Distance, Constants.AutoSwitchOrScaleToNextCube1Power, angle));

        // Set angle to turn towards new cube based off of starting position
        angle = -142.0;
        if (!isRightStart)
            angle = -angle;

        // Turn towards new cube
        addSequential(new ChassisTurnAngle(angle, 0.0), Constants.ChassisTurnTimeOutTime);

        // Set intake inwards
        addParallel(new IntakeInOut(true, Constants.IntakeWheelInRPM));

        // Drive into new cube
        addSequential(new ChassisDriveRange(Constants.AutoSwitchOrScaleToCubeDistance, Constants.AutoSwitchOrScaleToCubePower, angle));

        // Set intake in to voltage so we do not pull in the cube too hard
        addSequential(new IntakeInOutVoltage(true, Constants.IntakeWheelHoldVoltage));

        // Set elevator to switch height
        addSequential(new ElevatorUpDownPosition(Constants.ElevatorSwitchPosition));

        // Set intake in position to receive new cube
        addParallel(new IntakeRotate(Constants.IntakeShootAngle));
        
        // Drive into the switch
        addSequential(new ChassisDriveDistance(0.5, -Constants.AutoSwitchOrScaleToCubePower, angle));

        // Drive into the switch
        addSequential(new ChassisDriveDistance(1.5, Constants.AutoSwitchOrScaleToCubePower, angle), 1.5);

        // Release the Cube
        addSequential(new IntakeInOutTime(false, Constants.IntakeWheelShootTime, Constants.IntakeMaximumRPM));

        return true;
    }
}
