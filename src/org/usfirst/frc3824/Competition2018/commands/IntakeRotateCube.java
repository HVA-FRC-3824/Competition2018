// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3824.Competition2018.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc3824.Competition2018.Constants;
import org.usfirst.frc3824.Competition2018.Robot;

/*********************************************************************
 * Intake Rotate Cube class
 *********************************************************************/
public class IntakeRotateCube extends Command
{
    Timer timer = new Timer();
    
    private boolean isDone;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    /*********************************************************************
     * Class constructor
     *********************************************************************/
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public IntakeRotateCube()
    {
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    /*********************************************************************
     * Called just before this Command runs the first time
     *********************************************************************/
    @Override
    protected void initialize()
    {
        // Reset and start the timer
        timer.reset();
        timer.start();
        
        isDone = false;
    }

    /*********************************************************************
     * Called repeatedly when this Command is scheduled to run
     *********************************************************************/
    @Override
    protected void execute()
    {
//        // Rotate the left wheel out
//        if (timer.get() < Constants.IntakeWheelRotateTime1)
//        {
//            Robot.intake.setWheelRPM_Right(false, Constants.IntakeWheelRotateRightRPM1);
//            Robot.intake.setWheelRPM_Left(true, Constants.IntakeWheelRotateLeftRPM1);
//        }
//       
//        // Rotate the right wheel in
//        else if (timer.get() < Constants.IntakeWheelRotateTime2)
//        {
//            Robot.intake.setWheelRPM_Right(true, Constants.IntakeWheelRotateRightRPM2);
//            Robot.intake.setWheelRPM_Left(true, Constants.IntakeWheelRotateLeftRPM2);    
//        }
//
//        // Rotate both wheels in
//        else if (timer.get() < Constants.IntakeWheelRotateTime3)
//        {
//            Robot.intake.setWheelRPM_Right(false, Constants.IntakeWheelRotateRightRPM3);
//            Robot.intake.setWheelRPM_Left(false, Constants.IntakeWheelRotateLeftRPM3);   
//        }
        
          // Rotate outward
          if (timer.get() < 0.2)
          {
              Robot.intake.setWheelVoltageRight(false, 0.4);
              Robot.intake.setWheelVoltageLeft(false, 0.4);
          }
         
          // Rotate inward
          else if (timer.get() < 0.8)
          {
              Robot.intake.setWheelVoltageRight(true, 1.0);
              Robot.intake.setWheelVoltageLeft(true, 1.0);    
          } else
          {
              isDone = true;
          }
    }

    /*********************************************************************
     * Make this return true when this Command no longer needs to run execute()
     *********************************************************************/
    @Override
    protected boolean isFinished()
    {
        // Determine if the timer has expired
        return isDone;
    }

    /*********************************************************************
     * Called once after isFinished returns true
     *********************************************************************/
    @Override
    protected void end()
    {
        // Stop the timer
        timer.stop();
        
        // Stop the Intake Wheels
        Robot.intake.setBothWheelsVoltage(true, 0.0);
    }

    /*********************************************************************
     * Called when another command which requires one or more of the same
     * subsystems is scheduled to run
     *********************************************************************/
    @Override
    protected void interrupted()
    {
        // Call the end method to stop the intake wheels
        end();
    }
}
